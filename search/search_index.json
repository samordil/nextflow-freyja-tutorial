{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nextflow Tutorial with Freyja","text":"<p>Welcome to Nextflow Training Tutorial with Freyja! </p> <p>This tutorial is designed to teach you Nextflow by using examples with Freyja, a tool for analyzing SARS-CoV-2 wastewater sequencing data.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Introduction to Nextflow \u2013 Basics, syntax, and workflow concepts</li> <li>Understanding Freyja \u2013 What it does and how it works</li> <li>Building a Nextflow pipeline to process sequencing data using Freyja</li> <li>Running and optimizing Nextflow workflows</li> </ul>"},{"location":"#tutorial-outline","title":"Tutorial Outline","text":""},{"location":"#introduction-to-nextflow","title":"Introduction to Nextflow","text":"<ul> <li>What is Nextflow?</li> <li>Why use Nextflow for bioinformatics?</li> <li>Basic concepts: processes, channels, and DAGs</li> <li>Installation and setup</li> </ul>"},{"location":"#introduction-to-freyja","title":"Introduction to Freyja","text":"<ul> <li>Overview of Freyja and its purpose</li> <li>How it processes sequencing data</li> <li>Expected inputs and outputs</li> <li>Example command-line usage</li> </ul>"},{"location":"#building-a-nextflow-pipeline-with-freyja","title":"Building a Nextflow Pipeline with Freyja","text":"<ul> <li>Creating a <code>nextflow.config</code> file</li> <li>Writing a basic Nextflow script (<code>main.nf</code>)</li> <li>Running and debugging the workflow</li> </ul>"},{"location":"#hands-on-exercises","title":"Hands-on Exercises","text":"<ul> <li>Running a basic pipeline</li> <li>Modifying the workflow (e.g., changing parameters)</li> <li>Interpreting Freyja\u2019s output</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Using containers (Docker/Singularity) for reproducibility</li> <li>Scaling with cloud or HPC</li> <li>Adding error handling and logging</li> </ul>"},{"location":"channels/","title":"Understanding Channels in Nextflow","text":""},{"location":"channels/#what-are-channels","title":"What Are Channels?","text":"<p>In nextflow, channels are the main way data moves between processes. They act as data streams, passing files, variables, or other values between processes.  </p> <p>Think of channels as conveyor belts that move data from one process to another. </p>"},{"location":"channels/#types-of-channels","title":"Types of Channels","text":"<p>Channels in Nextflow are one-directional and can be either:</p> <ul> <li>Value Channel \u2013 Hold a single value (e.g., a number or string).</li> <li>Queue Channel \u2013 Hold multiple values and behave like a stream.</li> </ul>"},{"location":"channels/#creating-channels","title":"Creating Channels","text":"<p>Channels can be created using built-in factory methods like <code>Channel.of()</code>, <code>Channel.from()</code>, <code>Channel.fromPath()</code> and <code>Channel.value()</code>.  </p>"},{"location":"channels/#example-1-creating-a-simple-channel","title":"Example 1: Creating a simple channel","text":"<p><pre><code>sample_ch = Channel.of(\"sample1.fastq\", \"sample2.fastq\", \"sample3.fastq\")\n</code></pre> What this does:</p> <ul> <li>Creates a channel containing paths to three FastQ file and assigns them to <code>sample_ch</code> varible.</li> <li>The <code>sample_ch</code> can now be passed as input to a process</li> </ul>"},{"location":"channels/#example-2-creating-a-channel-from-files","title":"Example 2: Creating a channel from files","text":"<p><pre><code>fastq_file_ch = Channel.fromPath(\"data/*.fastq\")\n</code></pre> This will create a channel that holds all FASTQ files in the data/ directory.</p>"},{"location":"channels/#how-channels-work-in-a-pipeline","title":"How Channels Work in a Pipeline:","text":"<ul> <li>Channels send data to a process as input.</li> <li>A process modifies the data and sends it to an output channel.</li> <li>The output channel can then be used by another process.</li> </ul>"},{"location":"demix/","title":"Writing freyja_demix.nf Module","text":""},{"location":"demix/#step-2-writing-the-freyja_demixnf-module","title":"Step 2: Writing the <code>freyja_demix.nf</code> Module","text":"<p>The <code>freyja_demix.nf</code> module contains the <code>FREYJA_DEMIX</code> process, which takes the output from <code>FREYJA_VARIANTS</code> and processes it further.</p> <p>It:</p> <ul> <li>Accepts a <code>.variant</code> file and a <code>.depths</code> file as input.</li> <li>Runs <code>freyja demix</code> command.</li> <li>Produces a <code>.tsv</code> file containing the final results.</li> </ul> <p>Now open you text editor or run:</p> <pre><code>nano modules/freyja_demix.nf\n</code></pre> <p>Here is the full Code for <code>FREYJA_DEMIX</code></p> <pre><code>process FREYJA_DEMIX {\n\n    input:\n        path variant_file\n        path depth_file\n\n    output:\n        path \"${sample_basename}.tsv\"\n\n    script:\n    sample_basename = variant_file.simpleName\n\n        \"\"\"\n        freyja demix $variant_file $depth_file --output ${sample_basename}.tsv\n        \"\"\"\n}\n</code></pre> <p>Let's break it down:</p>"},{"location":"demix/#declaring-the-input-files","title":"Declaring the Input Files","text":"<pre><code>    input:\n        path variant_file\n        path depth_file\n</code></pre> <ul> <li><code>variant_file</code> \u2013 The .variant file generated by the <code>FREYJA_VARIANTS</code> process.</li> <li><code>depth_file</code> \u2013 The .depths file generated by the <code>FREYJA_VARIANTS</code> process.</li> <li>These files serve as inputs for <code>FREYJA_VARIANTS</code>, which analyzes the data.</li> </ul>"},{"location":"demix/#declaring-the-output-file","title":"Declaring the Output File","text":"<pre><code>    output:\n        path \"${sample_basename}.tsv\"\n</code></pre> <ul> <li>The <code>FREYJA_DEMIX</code> process generates a <code>.tsv</code> file that stores lineage abundance results.</li> </ul>"},{"location":"demix/#running-the-command","title":"Running the Command","text":"<pre><code>    script:\n    \"\"\"\n    freyja demix $variant_file $depth_file --output ${sample_basename}.tsv\n    \"\"\"\n</code></pre> <ul> <li>Calls <code>freyja demix</code> with the variant and depth files as inputs.</li> <li>Redirects the output to a .tsv file.</li> </ul> <p>Now save the changes you have made to the freyja_demix.nf module.</p>"},{"location":"environment_setup/","title":"Setting Up Nextflow and Freyja","text":"<p>Before we start building workflows, let\u2019s set up our environment by installing Nextflow and Freyja.</p>"},{"location":"environment_setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have: - A Linux or macOS system (Windows users can use WSL). - Java 8 or higher installed. - Python 3 installed.</p>"},{"location":"environment_setup/#installing-nextflow","title":"Installing Nextflow","text":"<p>Nextflow requires Java 8+ and can be installed using the following command:</p> <pre><code>curl -s https://get.nextflow.io | bash\nchmod +x nextflow\nsudo mv nextflow /usr/local/bin\n</code></pre> <p>To verify installation, run: <pre><code>nextflow -version\n</code></pre></p>"},{"location":"environment_setup/#installing-freyja","title":"Installing Freyja","text":"<p>Freyja requires Python 3 and can be installed via pip:</p> <pre><code>pip install freyja\n</code></pre> <p>To check if Freyja is installed correctly run: <pre><code>freyja --help\n</code></pre></p>"},{"location":"environment_setup/#alternative-installation-via-conda","title":"Alternative installation via conda","text":"<p>If you prefer using Conda, first ensure it is installed. If not, follow the official installation guide. </p> <p>Once Conda is set up, create a new environment named training-tutorial with Python by running:</p> <pre><code>conda create -n training-tutorial python=3.10\n</code></pre> <p>Activate the environment:</p> <pre><code>conda activate training-tutorial\n</code></pre> <p>Now, install Nextflow and Freyja using conda:</p> <pre><code>conda install bioconda::nextflow\nconda install bioconda::freyja\n</code></pre>"},{"location":"freyja_basics/","title":"Introduction to Freyja","text":"<p>Freyja is a tool for analyzing SARS-CoV-2 sequencing data. It helps identify viral lineages and estimate their relative abundances by processing variant data from sequencing reads. It is typically used after primer trimming and variant calling.</p>"},{"location":"freyja_basics/#why-use-freyja","title":"Why Use Freyja?","text":"<ul> <li>Accurate Variant Analysis \u2013 Identifies SARS-CoV-2 variants in sequencing data.  </li> <li>Computationally Efficient \u2013 Fast processing of large sequencing datasets.  </li> <li>Integrates with Nextflow \u2013 Can be automated in bioinformatics pipelines.  </li> </ul>"},{"location":"freyja_basics/#understanding-freyja-commands","title":"Understanding Freyja Commands","text":"<p>Freyja provides several commands for analyzing sequencing data. In this tutorial, we will focus on three key commands:</p> <ul> <li><code>freyja variants</code> \u2013 This command analyzes a BAM file to identify genetic variants using samtools and iVar</li> <li><code>freyja demix</code> \u2013 Estimates the relative abundances of viral lineages.</li> </ul> <p>These commands form the foundation of the Nextflow pipeline we will build in the next section.</p>"},{"location":"freyja_basics/#running-freyja-commands","title":"Running Freyja Commands","text":"<p>Now that we understand the key Freyja commands, let's see how they are executed.</p>"},{"location":"freyja_basics/#running-freyja-variants-command","title":"Running <code>freyja variants</code> command","text":"<p>This command extracts variant and depth information from a sequencing dataset. <pre><code>freyja variants sample1.bam \\\n  --variants sample1_variants.tsv \\\n  --depths sample1.depths \\\n  --ref ref_genome.fasta\n</code></pre> Breakdown:</p> <ul> <li>sample1.bam \u2013 Input BAM file containing aligned sequencing reads.</li> <li><code>--variants</code> sample1_variants.tsv \u2013 Output file storing variant information.</li> <li><code>--depths</code> sample1.depth \u2013 Output file storing sequencing depth information.</li> <li><code>--ref</code> ref_genome.fasta \u2013 input Reference genome file to align against.</li> </ul> <p>Note</p> <p>The <code>freyja variants</code> command above takes 2 input files: a BAM file (sequencing data) and a FASTA file (reference genome). It produces 2 output files: a .depth file (sequencing depth information) and a .tsv file (variant details).</p>"},{"location":"freyja_basics/#running-freyja-demixcommand","title":"Running <code>freyja demix</code>command","text":"<p>Once we have the variant and depth files, we can estimate lineage abundances.</p> <p><pre><code>freyja demix sample1_variants.tsv sample1.depth \\\n--output sample_id.demix.tsv\n</code></pre> Breakdown:</p> <ul> <li>sample1_variants.tsv \u2013 Input variant file from freyja variants.</li> <li>sample1.depth \u2013 Input depth file from freyja variants.</li> <li><code>--output</code> sample1_demix.tsv \u2013 Output file storing detected lineages, their relative abundances, and a summary based on known variant groups. .</li> </ul> <p>Note</p> <p>The <code>freyja demix</code> command above takes 2 input files: a .depth file (sequencing depth information) and a .tsv file (variant details) and generates 1 .tsv output file (relative abundance): </p> <p>Since we've covered two key Freyja commands, we can now integrate them into a Nextflow pipeline to reinforce Nextflow concepts.</p>"},{"location":"module_overview/","title":"Writing Nextflow Modules for Freyja","text":""},{"location":"module_overview/#overview","title":"Overview","text":"<p>Now that we have created Nextflow processes, it's time to organize them using modules.  </p>"},{"location":"module_overview/#what-is-a-module","title":"What is a Module?","text":"<p>A module in Nextflow is simply a separate file that contains a process. This makes the pipeline organized and allows us to reuse processes easily.  </p> <p>For example: Instead of writing a long <code>main.nf</code> script, we put each process in its own module. This helps keep the pipeline clean and modular.  </p>"},{"location":"module_overview/#creating-nextflow-modules","title":"Creating Nextflow Modules","text":"<p>We will create two modules, each containing one Nextflow process:</p> <ol> <li><code>freyja_variants.nf</code> Module \u2013 Contains the <code>FREYJA_VARIANTS</code> process, which extracts sequencing depth and variant data from a <code>.BAM</code> file.  </li> <li><code>freyja_demix.nf</code> Module \u2013 Contains the <code>FREYJA_DEMIX</code> process, which estimates the relative abundance of viral lineages from the extracted data.  </li> </ol> <p>Tip</p> <p>Naming Nextflow Processes </p> <p>It's common practice (but not mandatory) to name Nextflow processes in capital letters and include the tool's name.  </p> <p>This improves readability and makes it easier to understand what each process does.  </p> <p>Example: <pre><code>process FREYJA_VARIANTS { ... }  // Runs freyja variants  \nprocess FREYJA_DEMIX { ... }     // Runs freyja demix  \n</code></pre></p>"},{"location":"nextflow_overview/","title":"Introduction to nextflow","text":"<p>Nextflow is a workflow management system designed to build and run computational pipelines. It is widely used in bioinformatics, data science, and HPC (High-Performance Computing).</p>"},{"location":"nextflow_overview/#why-use-nextflow","title":"Why use nextflow?","text":"<p>Nextflow makes workflows:</p> <ul> <li>Reproducible \u2013 Ensures pipelines run the same way on different systems.  </li> <li>Scalable \u2013 Works on laptops, HPC clusters, and cloud environments.  </li> <li>Modular \u2013 Pipelines are broken into reusable processes (modules).  </li> <li>Parallelized \u2013 Automatically runs tasks in parallel when possible.  </li> </ul>"},{"location":"nextflow_overview/#nextflow-script-basics","title":"Nextflow script basics","text":"<p>A Nextflow pipeline is written in nextflow DSL2 (Domain-Specific Language 2). Let's look at a simple example:</p>"},{"location":"nextflow_overview/#example-hello-world-in-nextflow","title":"Example: Hello World in Nextflow","text":"<pre><code>#!/usr/bin/env nextflow     \n\nnextflow.enable.dsl=2\n\nprocess sayHello {\n    output:\n    stdout\n\n    script:\n    \"\"\"\n    echo \"Hello, Nextflow!\"\n    \"\"\"\n}\n\nworkflow {\n    sayHello()\n}\n</code></pre>"},{"location":"nextflow_overview/#breaking-it-down","title":"Breaking it down:","text":"<ul> <li><code>#!/usr/bin/env nextflow</code> This tells the system to use Nextflow to execute the script. </li> <li><code>nextflow.enable.dsl=2</code> Enables Nextflow DSL2, which is the latest and most flexible version. </li> <li>Defining a process (<code>process sayHello { ... }</code>) A process is a unit of execution. In this case, it runs a small shell command. </li> <li> <p>The script section contains the actual command: <pre><code>echo \"Hello, Nextflow!\"\n</code></pre></p> </li> <li> <p>Output section (<code>output: stdout</code>) Captures the output of the process, in this case, the text \"Hello, Nextflow!\". </p> </li> <li>Defining a workflow (<code>workflow { sayHello() }</code>)     The workflow section calls the <code>sayHello</code> process. In larger pipelines, this is where you define how different processes connect.  </li> </ul>"},{"location":"nextflow_overview/#running-your-first-nextflow-script","title":"Running your first nextflow script","text":"<p>Save this script as <code>hello.nf</code> and run it with:</p> <pre><code>nextflow run hello.nf\n</code></pre>"},{"location":"nextflow_overview/#expected-output","title":"Expected Output","text":"<p>If everything is set up correctly, you should see something like this:</p> <pre><code>N E X T F L O W  ~  version X.X.X\nLaunching `hello.nf` [random_id] - revision X.X.X\nHello, Nextflow!\n</code></pre> <p>This confirms that Nextflow is installed and working correctly!</p>"},{"location":"operators/","title":"Understanding Operators in Nextflow","text":""},{"location":"operators/#what-are-operators","title":"What Are Operators?","text":"<p>Operators in Nextflow allow you to manipulate and transform data as it flows through channels. They help modify, filter, and combine data before passing it to a process.  </p>"},{"location":"operators/#commonly-used-operators","title":"Commonly Used Operators","text":"Operator Description Example <code>map</code> Transforms each element in a channel Convert file names to uppercase <code>filter</code> Selects elements that match a condition Keep only <code>.txt</code> files <code>collect</code> Gathers all elements into a single list Collect all sample names <code>flatten</code> Flattens nested lists into a single list Convert list of lists into one <code>groupTuple</code> Groups data into pairs Pair samples with metadata"},{"location":"operators/#example-1-using-map-to-transform-data","title":"Example 1: Using <code>map</code> to transform data","text":"<p>The <code>map</code> operator applies a function to every element in a channel.  </p> <p><pre><code>Channel.from(\"sample1.txt\", \"sample2.txt\", \"sample3.txt\")\n    | map { it.toUpperCase() }\n    | view()\n</code></pre> Output: <pre><code>SAMPLE1.TXT  \nSAMPLE2.TXT  \nSAMPLE3.TXT  \n</code></pre></p>"},{"location":"operators/#example-2-using-filter-to-select-data","title":"Example 2: Using <code>filter</code> to select data","text":"<p>The <code>filter</code> operator removes unwanted elements based on a condition. <pre><code>Channel.from(\"data1.txt\", \"image.png\", \"data2.txt\")\n    | filter { it.endsWith('.txt') }\n    | view()\n</code></pre> Output: <pre><code>data1.txt  \ndata2.txt  \n</code></pre></p>"},{"location":"operators/#example-3-using-grouptuple-to-organize-data","title":"Example 3: Using <code>groupTuple</code> to Organize Data","text":"<p>The <code>groupTuple</code> operator groups elements into structured tuples. <pre><code>Channel.from([\"A\", \"B\", \"C\"], [1, 2, 3])\n    | groupTuple()\n    | view()\n</code></pre> Output: <pre><code>[A, 1]  \n[B, 2]  \n[C, 3]  \n</code></pre></p> <p>Note</p> <p>In Nextflow, you can connect channels and operators using the pipe (<code>|</code>) symbol. The <code>view</code> operator is one example of an operator that processes and displays data in a pipeline.</p>"},{"location":"pipeline_overview/","title":"Building a Nextflow Pipeline with Freyja","text":""},{"location":"pipeline_overview/#overview","title":"Overview","text":"<p>In this section, we'll build a Nextflow pipeline integrating Freyja commands from the previous section. We'll demonstrate how processes, channels, and operators work together by using two interconnected modules (processes):</p> <ol> <li>Variant Extraction Module \u2013 Uses <code>freyja variants</code> to identify genetic variants in a sample and generate sequencing depth information from a <code>.BAM</code> file.  </li> <li>Lineage Analysis Module \u2013 Uses <code>freyja demix</code> to analyze the variant and depth data, estimating the relative abundance of different viral lineages.</li> </ol>"},{"location":"pipeline_overview/#project-structure","title":"Project Structure","text":"<p>Here's how our pipeline will be structured: <pre><code>training/\n\u2502-- main.nf\n\u2502-- nextflow.config\n|-- modules/\n|   \u251c\u2500\u2500 freyja_variants.nf \n|   \u251c\u2500\u2500 freyja_demax.nf \n\u2502-- data/\n\u2502   \u251c\u2500\u2500 ref_genome.fasta\n\u2502   \u251c\u2500\u2500 bam_files/\n\u2502   \u2502   \u251c\u2500\u2500 sample1.bam\n\u2502   \u2502   \u251c\u2500\u2500 sample2.bam\n\u2502   \u2502   \u251c\u2500\u2500 sample3.bam\n</code></pre></p> <p>Breaking it Down:</p> <ol> <li><code>training/</code> - Root directory that contains all the files and folders for the Nextflow pipeline.</li> <li><code>main.nf</code> \u2013 The main script that defines how the pipeline runs. It connects different steps and manages data flow.</li> <li><code>nextflow.config</code> \u2013 A settings file where we define parameters like memory, CPU usage, and other execution settings.</li> <li><code>modules</code> - A folder containing small, reusable nextflow scripts that handle different tasks in the pipeline.<ul> <li><code>freyja_variants.nf</code> - Runs freyja variants to extract variant and depth information from BAM files.</li> <li><code>freyja_demax.nf</code> - Runs freyja demix to estimate lineage abundances.</li> </ul> </li> <li><code>data/</code> \u2013 This folder holds input files needed for the pipeline, such as sequencing data and sample information.<ul> <li><code>ref_genome.fasta</code> \u2013 A reference genome file that serves as a guide for analyzing sequencing data.</li> <li><code>bam_files/</code> \u2013 A directory containing BAM files, which store aligned sequencing reads.</li> </ul> </li> </ol> <p>Note</p> <p>Each <code>.BAM</code> in the <code>bam_file</code> folder represents a different sample</p>"},{"location":"processes/","title":"Understanding Processes in Nextflow","text":""},{"location":"processes/#what-are-processes","title":"What Are Processes?","text":"<p>A process in Nextflow is a unit of execution that:</p> <ul> <li>Runs a specific command or script.  </li> <li>Takes input from a channel.  </li> <li>Produces an output, which is sent to a new channel.  </li> </ul> <p>Processes are isolated from each other, often run in parallel and communicate only through channels.</p>"},{"location":"processes/#basic-structure-of-a-process","title":"Basic structure of a process","text":"<p>A process follows this structure:  </p> <pre><code>process NAME {\n    input:\n    &lt;input definition&gt; // input variable\n\n    output:\n    &lt;output definition&gt; // output variable\n\n    script:\n    \"\"\"\n    &lt;commands to execute&gt;\n    \"\"\"\n}\n</code></pre> <p>Each process has: </p> <ul> <li>A NAME - name of the process</li> <li>An Input \u2013 data coming from a channel.  </li> <li>Execution Block \u2013 Runs the given script/command.  </li> <li>Output \u2013 Sent data to an output channel.  </li> </ul>"},{"location":"processes/#example-1-a-simple-process","title":"Example 1: A simple process","text":"<p><pre><code>process countBases {\n    input:\n    path sample_file\n\n    output:\n    path \"output_file.count\"\n\n    script:\n    \"\"\"\n    wc -c $sample_file &gt; output_file.count\n    \"\"\"\n}\n</code></pre> Here:</p> <ul> <li>The process <code>countBases</code> defines a variable called <code>samples_file</code>, which holds the path to a file received through a <code>queue channel</code>.</li> <li>It then executes the <code>wc -c</code> command in the <code>script</code> section to generate the <code>output_file.count</code> that is made available through another channel.</li> </ul>"},{"location":"project_setup/","title":"Setting Up the Project Structure","text":"<p>Before writing our Nextflow pipeline, let's first create the necessary files and directories step by step. This will help us organize our project properly.</p>"},{"location":"project_setup/#step-1-create-the-main-project-directory","title":"Step 1: Create the Main Project Directory","text":"<p>First, create a new directory for the pipeline and navigate into it: <pre><code>mkdir training  \ncd training  \n</code></pre> This will be the root directory where all pipeline files will be stored.</p>"},{"location":"project_setup/#step-2-create-the-main-pipeline-script","title":"Step 2: Create the Main Pipeline Script","text":"<p>The main.nf file defines how the pipeline runs. Create this file:</p> <p><pre><code>touch main.nf  \n</code></pre> This script will later contain the workflow definition that connects different processes.</p>"},{"location":"project_setup/#step-3-create-the-configuration-file","title":"Step 3: Create the Configuration File","text":"<p>Next, create nextflow.config, which will store pipeline settings such as memory, CPU usage, and execution options.</p> <pre><code>touch nextflow.config  \n</code></pre>"},{"location":"project_setup/#step-4-create-the-modules-directory","title":"Step 4: Create the Modules Directory","text":"<p>To keep our pipeline organized, we'll use Nextflow modules for different steps. Create a <code>modules/</code> directory and add the necessary files:</p> <pre><code>mkdir modules  \ntouch modules/freyja_variants.nf  \ntouch modules/freyja_demix.nf\n</code></pre> <p>Each of these .nf files will contain a Nextflow process for running Freyja commands.</p>"},{"location":"project_setup/#step-5-set-up-the-data-directory","title":"Step 5: Set Up the Data Directory","text":"<p>Now, let's create a folder for input data and add placeholder files. <pre><code>mkdir data  \ntouch data/ref_genome.fasta  \n</code></pre></p> <p>Inside <code>bam_files/</code>, add some sample .BAM files (or copy your actual BAM files here):</p> <pre><code>mkdir data/bam_files  \ntouch data/bam_files/sample1.bam  \ntouch data/bam_files/sample2.bam  \ntouch data/bam_files/sample3.bam  \n</code></pre> <p>Note</p> <p>If you already have a <code>reference genome</code> and <code>.BAM</code> files, copy them into the <code>data/</code> folder instead of creating placeholder files.</p>"},{"location":"variant/","title":"Writing freyja_variants.nf Module","text":""},{"location":"variant/#step-1-writing-the-freyja_variantsnf-module","title":"Step 1: Writing the <code>freyja_variants.nf</code> Module","text":"<p>The <code>freyja_variants.nf</code> module contains the <code>FREYJA_VARIANTS</code> process. This process will:  </p> <ul> <li>Take a .BAM file and FASTA fileS as input.  </li> <li>Run <code>freyja variants</code> to extract variant and depth information.  </li> <li>Produce <code>.depths</code> and <code>.variants</code> files as output.  </li> </ul> <p>Use your preferred text editor or run:  </p> <pre><code>nano modules/freyja_variants.nf\n</code></pre> <p>Here is the full code for the FREYJA_VARIANTS process:</p> <pre><code>process FREYJA_VARIANTS {\n\n    input:\n        path fasta_file\n        each path(bam_file)\n\n    output:\n        path \"${bam_basename}.variant\", emit: variant\n        path \"${bam_basename}.depths\", emit: depths\n\n    script:\n    bam_basename = bam_file.simpleName\n\n        \"\"\"\n        freyja variants $bam_file \\\n            --ref $fasta_file \\\n            --variants ${bam_basename}.variant \\\n            --depths ${bam_basename}.depths\n        \"\"\"\n}\n</code></pre>"},{"location":"variant/#breaking-it-down-step-by-step","title":"Breaking it Down step by step","text":""},{"location":"variant/#process-definition","title":"Process Definition","text":"<p>Every Nextflow process starts with the <code>process</code> keyword, followed by a name (written in uppercase).</p> <pre><code>process FREYJA_VARIANTS { }\n</code></pre> <ul> <li>Naming convention: Tool name in uppercase (e.g. <code>FREYJA_VARIANTS</code>).</li> <li>The curly braces <code>{}</code> enclose the process logic.</li> </ul>"},{"location":"variant/#defining-inputs","title":"Defining Inputs","text":"<p>The input section specifies what files the process needs.</p> <pre><code>    input:\n        path bam_file\n        path fasta_file\n</code></pre> <ul> <li>path each <code>bam_file</code> \u2192 The BAM file (aligned sequencing reads). The each keyword ensures that the process runs separately for each BAM file in the input channel.</li> <li>path <code>fasta_file</code> \u2192 The reference genome.</li> <li>These files will be received from a channel.</li> </ul>"},{"location":"variant/#defining-outputs","title":"Defining Outputs","text":"<p>The output section declares the files the process will generate.</p> <pre><code>    output:\n        path \"${variant_file}.variant\"\n        path \"${depth_file}.depths\"\n</code></pre> <ul> <li><code>${variant_file}.variant</code> \u2192 Stores variant information.</li> <li><code>${depth_file}.depths</code> \u2192 Stores sequencing depth.</li> <li><code>${}</code> syntax allows dynamic filenames based on variable names.</li> </ul>"},{"location":"variant/#writing-the-command-script-section","title":"Writing the Command (Script Section)","text":"<p>This is where the actual Freyja command is executed.</p> <pre><code>    script:\n        \"\"\"\n        freyja variants $bam_file \\\n            --ref $fasta_file \\\n            --variants ${bam_basename}.variant \\\n            --depths ${bam_basename}.depths\n        \"\"\"\n</code></pre> <ul> <li><code>$bam_file</code> and <code>$fasta_file</code> \u2192 Access input variables.</li> <li><code>${variant_file}.variant</code> and <code>${depth_file}.depths</code> \u2192 Define output filenames.</li> <li>Triple quotes (\"\"\") allow multi-line commands for better readability.</li> </ul> <p>Note</p> <p>To access variables in a process, use <code>$variable_name</code>. To add suffixes or prefixes, enclose the variable in <code>{}</code> \u2192 <code>${depth_file}.depths</code>.</p> <p>Now save the changes you have made to the <code>freyja_variants.nf</code> module.</p>"},{"location":"workflows/","title":"Understanding Workflows in Nextflow","text":""},{"location":"workflows/#what-is-a-workflow","title":"What is a Workflow?","text":"<p>A workflow in Nextflow is like a blueprint that defines how processes, channels, and operators interact. It controls the flow of data and execution in your pipeline.</p> <p>Workflows help:</p> <ul> <li>Structure pipelines \u2013 Define the execution order of processes.  </li> <li>Reuse code \u2013 Use named workflows multiple times.  </li> <li>Improve readability \u2013 Keep complex pipelines manageable.  </li> </ul>"},{"location":"workflows/#types-of-workflows","title":"Types of Workflows","text":"<p>There are two types of workflows:  </p> <ul> <li>Entry Workflow \u2013 The main workflow that runs when you execute the script.  </li> <li>Named Workflows \u2013 Workflows that can be reused and called from other workflows.</li> </ul>"},{"location":"workflows/#entry-workflow-main-workflow","title":"Entry Workflow (Main Workflow)","text":"<p>Every Nextflow script has one entry workflow that acts as the starting point of execution.  </p> <p>Example: A simple workflow that adds \"world!\" to different greetings.  </p> <p><pre><code>workflow {\n    Channel.of('Bonjour', 'Ciao', 'Hello', 'Hola')\n        | map { v -&gt; \"$v world!\" }\n        | view\n}\n</code></pre>  How it works:</p> <ul> <li>A channel is created with greetings.</li> <li>The map operator modifies each greeting by adding \"world!\".</li> <li>The view operator prints the output.</li> </ul> <p>output: <pre><code>Bonjour world!\nCiao world!\nHello world!\nHola world!\n</code></pre></p> <p>Named Workflows (Reusable Workflows) A named workflow is a reusable workflow that can be called inside other workflows, making pipelines modular and structured.</p> <p>Example: Connecting two workflows:</p> <pre><code>workflow my_workflow {\n    foo()\n    bar( foo.out.collect() )\n}\n\nworkflow {\n    my_workflow()\n}\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>my_workflow</code> is a named workflow that contains two processes:         1. <code>foo()</code> runs first.         2. <code>bar()</code> takes the output of <code>foo()</code> and processes it.  </p> </li> <li> <p>The main workflow (<code>workflow { my_workflow() }</code>) calls <code>my_workflow()</code>, executing everything in order.  </p> </li> </ul>"}]}