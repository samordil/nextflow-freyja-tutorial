{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nextflow Tutorial with Freyja","text":"<p>Welcome to the Nextflow Training Tutorial! This tutorial is designed to teach you Nextflow by using examples with Freyja, a tool for analyzing SARS-CoV-2 wastewater sequencing data.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Introduction to Nextflow \u2013 Basics, syntax, and workflow concepts</li> <li>Understanding Freyja \u2013 What it does and how it works</li> <li>Building a Nextflow pipeline to process sequencing data using Freyja</li> <li>Running and optimizing Nextflow workflows</li> </ul>"},{"location":"#tutorial-outline","title":"Tutorial Outline","text":""},{"location":"#introduction-to-nextflow","title":"Introduction to Nextflow","text":"<ul> <li>What is Nextflow?</li> <li>Why use Nextflow for bioinformatics?</li> <li>Basic concepts: processes, channels, and DAGs</li> <li>Installation and setup</li> </ul>"},{"location":"#introduction-to-freyja","title":"Introduction to Freyja","text":"<ul> <li>Overview of Freyja and its purpose</li> <li>How it processes sequencing data</li> <li>Expected inputs and outputs</li> <li>Example command-line usage</li> </ul>"},{"location":"#building-a-nextflow-pipeline-with-freyja","title":"Building a Nextflow Pipeline with Freyja","text":"<ul> <li>Creating a <code>nextflow.config</code> file</li> <li>Writing a basic Nextflow script (<code>main.nf</code>)</li> <li>Running and debugging the workflow</li> </ul>"},{"location":"#hands-on-exercises","title":"Hands-on Exercises","text":"<ul> <li>Running a basic pipeline</li> <li>Modifying the workflow (e.g., changing parameters)</li> <li>Interpreting Freyja\u2019s output</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Using containers (Docker/Singularity) for reproducibility</li> <li>Scaling with cloud or HPC</li> <li>Adding error handling and logging</li> </ul>"},{"location":"channels/","title":"Understanding Channels in Nextflow","text":""},{"location":"channels/#what-are-channels","title":"What Are Channels?","text":"<p>In nextflow, channels are the main way data moves between processes. They act as data streams, passing files, variables, or other values between processes.  </p> <p>Think of channels as conveyor belts that move data from one process to another. </p>"},{"location":"channels/#types-of-channels","title":"Types of Channels","text":"<p>Channels in Nextflow are one-directional and can be either:</p> <ul> <li>Value Channel \u2013 Hold a single value (e.g., a number or string).</li> <li>Queue Channel \u2013 Hold multiple values and behave like a stream.</li> </ul>"},{"location":"channels/#creating-channels","title":"Creating Channels","text":"<p>Channels can be created using built-in factory methods like <code>Channel.of()</code>, <code>Channel.from()</code>, <code>Channel.fromPath()</code> and <code>Channel.value()</code>.  </p>"},{"location":"channels/#example-1-creating-a-simple-channel","title":"Example 1: Creating a simple channel","text":"<pre><code>sample_ch = Channel.of(\"sample1.fastq\", \"sample2.fastq\", \"sample3.fastq\")\n</code></pre> <p>What this does:</p> <ul> <li>Creates a channel containing paths to three FastQ file and assigns them to <code>sample_ch</code> varible.</li> <li>The <code>sample_ch</code> can now be passed as input to a process</li> </ul>"},{"location":"channels/#example-2-creating-a-channel-from-files","title":"Example 2: Creating a channel from files","text":"<pre><code>fastq_file_ch = Channel.fromPath(\"data/*.fastq\")\n</code></pre> <p>This will create a channel that holds all FASTQ files in the data/ directory.</p>"},{"location":"channels/#how-channels-work-in-a-pipeline","title":"How Channels Work in a Pipeline:","text":"<ul> <li>Channels send data to a process as input.</li> <li>A process modifies the data and sends it to an output channel.</li> <li>The output channel can then be used by another process.</li> </ul>"},{"location":"freyja_basics/","title":"Introduction to Freyja","text":"<p>Freyja is a tool for analyzing SARS-CoV-2 sequencing data. It helps identify viral lineages and estimate their relative abundances by processing variant data from sequencing reads. It is typically used after primer trimming and variant calling.</p>"},{"location":"freyja_basics/#why-use-freyja","title":"Why Use Freyja?","text":"<ul> <li>Accurate Variant Analysis \u2013 Identifies SARS-CoV-2 variants in sequencing data.  </li> <li>Computationally Efficient \u2013 Fast processing of large sequencing datasets.  </li> <li>Integrates with Nextflow \u2013 Can be automated in bioinformatics pipelines.  </li> </ul>"},{"location":"freyja_basics/#understanding-freyja-commands","title":"Understanding Freyja Commands","text":"<p>Freyja provides several commands for analyzing sequencing data. In this tutorial, we will focus on three key commands:</p> <ul> <li><code>freyja variants</code> \u2013 Extracts variant and depth information from sequencing data.</li> <li><code>freyja demix</code> \u2013 Estimates the relative abundances of viral lineages.</li> <li><code>freyja covariants</code> \u2013 Identifies co-occurring mutations in the dataset. These commands form the foundation of the Nextflow pipeline we will build in the next section.</li> </ul>"},{"location":"freyja_basics/#running-freyja-commands","title":"Running Freyja Commands","text":"<p>Now that we understand the key Freyja commands, let's see how they are executed.</p>"},{"location":"freyja_basics/#running-freyja-variants-command","title":"Running <code>freyja variants</code> command","text":"<p>This command extracts variant and depth information from a sequencing dataset.</p> <pre><code>freyja variants input_file.bam \\\n  --variants sra_accession.tsv \\\n  --depths sra_accession.depths \\\n  --ref reference.fasta\n</code></pre> <p>Breakdown:</p> <ul> <li>input_file.bam \u2013 Input BAM file containing aligned sequencing reads.</li> <li><code>--variants</code> sra_accession.tsv \u2013 Output file storing variant information.</li> <li><code>--depths</code> sra_accession.depths \u2013 Output file storing sequencing depth information.</li> <li><code>--ref</code> reference.fasta \u2013 input Reference genome file to align against.</li> </ul>"},{"location":"freyja_basics/#running-freyja-demix","title":"Running <code>freyja demix</code>","text":"<p>Once we have the variant and depth files, we can estimate lineage abundances.</p> <pre><code>freyja demix variants_file depths_file \\\n  --eps params.eps \\\n  --output sample_id.demix.tsv \\\n  --barcodes barcodes_file\n</code></pre> <p>Breakdown:</p> <ul> <li>variants_file \u2013 Input variant file from freyja variants.</li> <li>depths_file \u2013 Input depth file from freyja variants.</li> <li><code>--eps</code> params.eps \u2013 Error parameter to refine lineage estimates.</li> <li><code>--output</code> sample_id.demix.tsv \u2013 Output file storing lineage proportions.</li> <li><code>--barcodes</code> barcodes_file \u2013 Barcode file used to match variants to lineages.</li> </ul> <p>Running freyja covariants This command identifies co-occurring mutations in the dataset.</p> <pre><code>freyja covariants input_file.bam num_min_site num_max_site \\\n  --ref-genome ref_genome.fasta \\\n  --output sra_accession.covariants.tsv \\\n  --annot annotation_file\n</code></pre> <p>Breakdown:</p> <ul> <li>${input_bam} \u2013 Input BAM file with aligned sequencing data.</li> <li>min_site_num and max_site_num \u2013 Genomic region to analyze.</li> <li><code>--ref-genome</code> ref_genome.fasta \u2013 Reference genome for alignment.</li> <li><code>--output</code> sra_accession.covariants.tsv \u2013 Output file with co-occurring mutations.</li> <li><code>--annot</code> annotation_file \u2013 Annotation file to interpret results.</li> </ul> <p>Now that we've covered Freyja\u2019s essential commands, we\u2019re ready to integrate them into a nextflow pipeline!</p>"},{"location":"nextflow_overview/","title":"Introduction to nextflow","text":"<p>Nextflow is a workflow management system designed to build and run computational pipelines. It is widely used in bioinformatics, data science, and HPC (High-Performance Computing).</p>"},{"location":"nextflow_overview/#why-use-nextflow","title":"Why use nextflow?","text":"<p>Nextflow makes workflows:</p> <ul> <li>Reproducible \u2013 Ensures pipelines run the same way on different systems.  </li> <li>Scalable \u2013 Works on laptops, HPC clusters, and cloud environments.  </li> <li>Modular \u2013 Pipelines are broken into reusable processes (modules).  </li> <li>Parallelized \u2013 Automatically runs tasks in parallel when possible.  </li> </ul>"},{"location":"nextflow_overview/#nextflow-script-basics","title":"Nextflow script basics","text":"<p>A Nextflow pipeline is written in nextflow DSL2 (Domain-Specific Language 2). Let's look at a simple example:</p>"},{"location":"nextflow_overview/#example-hello-world-in-nextflow","title":"Example: Hello World in Nextflow","text":"<pre><code>#!/usr/bin/env nextflow     \n\nnextflow.enable.dsl=2\n\nprocess sayHello {\n    output:\n    stdout\n\n    script:\n    \"\"\"\n    echo \"Hello, Nextflow!\"\n    \"\"\"\n}\n\nworkflow {\n    sayHello()\n}\n</code></pre>"},{"location":"nextflow_overview/#breaking-it-down","title":"Breaking it down:","text":"<ul> <li><code>#!/usr/bin/env nextflow</code> This tells the system to use Nextflow to execute the script. </li> <li><code>nextflow.enable.dsl=2</code> Enables Nextflow DSL2, which is the latest and most flexible version. </li> <li>Defining a process (<code>process sayHello { ... }</code>) A process is a unit of execution. In this case, it runs a small shell command. </li> <li>The script section contains the actual command:</li> </ul> <pre><code>echo \"Hello, Nextflow!\"\n</code></pre> <ul> <li>Output section (<code>output: stdout</code>) Captures the output of the process, in this case, the text \"Hello, Nextflow!\". </li> <li>Defining a workflow (<code>workflow { sayHello() }</code>)     The workflow section calls the <code>sayHello</code> process. In larger pipelines, this is where you define how different processes connect.  </li> </ul>"},{"location":"nextflow_overview/#running-your-first-nextflow-script","title":"Running your first nextflow script","text":"<p>Save this script as <code>hello.nf</code> and run it with:</p> <pre><code>nextflow run hello.nf\n</code></pre>"},{"location":"nextflow_overview/#expected-output","title":"Expected Output","text":"<p>If everything is set up correctly, you should see something like this:</p> <pre><code>N E X T F L O W  ~  version X.X.X\nLaunching `hello.nf` [random_id] - revision X.X.X\nHello, Nextflow!\n</code></pre> <p>This confirms that Nextflow is installed and working correctly!</p>"},{"location":"operators/","title":"Understanding Operators in Nextflow","text":""},{"location":"operators/#what-are-operators","title":"What Are Operators?","text":"<p>Operators in Nextflow allow you to manipulate and transform data as it flows through channels. They help modify, filter, and combine data before passing it to a process.  </p>"},{"location":"operators/#commonly-used-operators","title":"Commonly Used Operators","text":"Operator Description Example <code>map</code> Transforms each element in a channel Convert file names to uppercase <code>filter</code> Selects elements that match a condition Keep only <code>.txt</code> files <code>collect</code> Gathers all elements into a single list Collect all sample names <code>flatten</code> Flattens nested lists into a single list Convert list of lists into one <code>groupTuple</code> Groups data into pairs Pair samples with metadata"},{"location":"operators/#example-1-using-map-to-transform-data","title":"Example 1: Using <code>map</code> to transform data","text":"<p>The <code>map</code> operator applies a function to every element in a channel.  </p> <pre><code>Channel.from(\"sample1.txt\", \"sample2.txt\", \"sample3.txt\")\n    | map { it.toUpperCase() }\n    | view()\n</code></pre> <p>Output:</p> <pre><code>SAMPLE1.TXT  \nSAMPLE2.TXT  \nSAMPLE3.TXT  \n</code></pre>"},{"location":"operators/#example-2-using-filter-to-select-data","title":"Example 2: Using <code>filter</code> to select data","text":"<p>The <code>filter</code> operator removes unwanted elements based on a condition.</p> <pre><code>Channel.from(\"data1.txt\", \"image.png\", \"data2.txt\")\n    | filter { it.endsWith('.txt') }\n    | view()\n</code></pre> <p>Output:</p> <pre><code>data1.txt  \ndata2.txt  \n\n</code></pre>"},{"location":"operators/#example-3-using-grouptuple-to-organize-data","title":"Example 3: Using <code>groupTuple</code> to Organize Data","text":"<p>The <code>groupTuple</code> operator groups elements into structured tuples.</p> <pre><code>Channel.from([\"A\", \"B\", \"C\"], [1, 2, 3])\n    | groupTuple()\n    | view()\n</code></pre> <p>Output:</p> <pre><code>[A, 1]  \n[B, 2]  \n[C, 3]  \n</code></pre>"},{"location":"processes/","title":"Understanding Processes in Nextflow","text":""},{"location":"processes/#what-are-processes","title":"What Are Processes?","text":"<p>A process in Nextflow is a unit of execution that:</p> <ul> <li>Runs a specific command or script.  </li> <li>Takes input from a channel.  </li> <li>Produces an output, which is sent to a new channel.  </li> </ul> <p>Processes are isolated from each other, often run in parallel and communicate only through channels.</p>"},{"location":"processes/#basic-structure-of-a-process","title":"Basic structure of a process","text":"<p>A process follows this structure:  </p> <pre><code>process NAME {\n    input:\n    &lt;input definition&gt; // input variable\n\n    output:\n    &lt;output definition&gt; // output variable\n\n    script:\n    \"\"\"\n    &lt;commands to execute&gt;\n    \"\"\"\n}\n</code></pre> <p>Each process has: </p> <ul> <li>A NAME - name of the process</li> <li>An Input \u2013 data coming from a channel.  </li> <li>Execution Block \u2013 Runs the given script/command.  </li> <li>Output \u2013 Sent data to an output channel.  </li> </ul>"},{"location":"processes/#example-1-a-simple-process","title":"Example 1: A simple process","text":"<pre><code>process countBases {\n    input:\n    path sample_file\n\n    output:\n    path \"output_file.count\"\n\n    script:\n    \"\"\"\n    wc -c $sample_file &gt; output_file.count\n    \"\"\"\n}\n</code></pre> <p>Here:</p> <ul> <li>The process <code>countBases</code> defines a variable called <code>samples_file</code>, which holds the path to a file received through a <code>queue channel</code>.</li> <li>It then executes the <code>wc -c</code> command in the <code>script</code> section to generate the <code>output_file.count</code> that is made available through another channel.</li> </ul>"},{"location":"setup/","title":"Setting Up Nextflow and Freyja","text":"<p>Before we start building workflows, let\u2019s set up our environment by installing Nextflow and Freyja.</p>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have: - A Linux or macOS system (Windows users can use WSL). - Java 8 or higher installed. - Python 3 installed.</p>"},{"location":"setup/#installing-nextflow","title":"Installing Nextflow","text":"<p>Nextflow requires Java 8+ and can be installed using the following command:</p> <pre><code>curl -s https://get.nextflow.io | bash\nchmod +x nextflow\nsudo mv nextflow /usr/local/bin\n</code></pre> <p>To verify installation, run:</p> <pre><code>nextflow -version\n</code></pre>"},{"location":"setup/#installing-freyja","title":"Installing Freyja","text":"<p>Freyja requires Python 3 and can be installed via pip:</p> <pre><code>pip install freyja\n</code></pre> <p>To check if Freyja is installed correctly run:</p> <pre><code>freyja --help\n</code></pre>"},{"location":"setup/#alternative-installation-via-conda","title":"Alternative installation via conda","text":"<p>If you prefer using Conda, first ensure it is installed. If not, follow the official installation guide. </p> <p>Once Conda is set up, create a new environment named training-tutorial with Python by running:</p> <pre><code>conda create -n training-tutorial python=3.9\n</code></pre> <p>Activate the environment:</p> <pre><code>conda activate training-tutorial\n</code></pre> <p>Now, install Nextflow and Freyja using conda:</p> <pre><code>conda install bioconda::nextflow\nconda install bioconda::freyja\n</code></pre>"}]}