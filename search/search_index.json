{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nextflow Tutorial with Freyja","text":"<p>Welcome to Nextflow Training Tutorial with Freyja! </p> <p>This tutorial is designed to teach you Nextflow by using examples with Freyja, a tool for analyzing SARS-CoV-2 wastewater sequencing data.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Introduction to Nextflow \u2013 Basics, syntax, and workflow concepts</li> <li>Understanding Freyja \u2013 What it does and how it works</li> <li>Building a Nextflow pipeline to process sequencing data using Freyja</li> <li>Running and optimizing Nextflow workflows</li> </ul>"},{"location":"#tutorial-outline","title":"Tutorial Outline","text":""},{"location":"#introduction-to-nextflow","title":"Introduction to Nextflow","text":"<ul> <li>What is Nextflow?</li> <li>Why use Nextflow for bioinformatics?</li> <li>Basic concepts: processes, channels, and DAGs</li> <li>Installation and setup</li> </ul>"},{"location":"#introduction-to-freyja","title":"Introduction to Freyja","text":"<ul> <li>Overview of Freyja and its purpose</li> <li>How it processes sequencing data</li> <li>Expected inputs and outputs</li> <li>Example command-line usage</li> </ul>"},{"location":"#building-a-nextflow-pipeline-with-freyja","title":"Building a Nextflow Pipeline with Freyja","text":"<ul> <li>Creating a <code>nextflow.config</code> file</li> <li>Writing a basic Nextflow script (<code>main.nf</code>)</li> <li>Running and debugging the workflow</li> </ul>"},{"location":"#hands-on-exercises","title":"Hands-on Exercises","text":"<ul> <li>Running a basic pipeline</li> <li>Modifying the workflow (e.g., changing parameters)</li> <li>Interpreting Freyja\u2019s output</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Using containers (Docker/Singularity) for reproducibility</li> <li>Scaling with cloud or HPC</li> <li>Adding error handling and logging</li> </ul>"},{"location":"best_practices/","title":"Best Practices for Organizing Nextflow Projects","text":""},{"location":"best_practices/#why-organize-your-project","title":"Why Organize Your Project?","text":"<p>A well-structured Nextflow project ensures better maintainability, collaboration, and reproducibility. Follow these best practices to keep your pipeline clean and scalable.</p> <ul> <li>Make it easy to navigate.  </li> <li>Enable reproducibility for future runs.  </li> <li>Improve collaboration with clear documentation.  </li> </ul>"},{"location":"best_practices/#recommended-project-structure","title":"Recommended Project Structure","text":"<pre><code>nextflow_project/\n\u2502\u2500\u2500 bin/                  # Custom scripts\n\u2502\u2500\u2500 conf/                 # Configuration files\n\u2502\u2500\u2500 docs/                 # Documentation and usage guides\n\u2502\u2500\u2500 workflows/            # Main Nextflow workflows\n\u2502\u2500\u2500 .gitignore            # Ignore unnecessary files\n\u2502\u2500\u2500 main.nf               # Main pipeline script\n\u2502\u2500\u2500 nextflow.config       # Nextflow configuration\n\u2502\u2500\u2500 README.md             # Project overview\n</code></pre>"},{"location":"best_practices/#key-best-practices","title":"Key Best Practices","text":""},{"location":"best_practices/#1-keep-workflows-modular","title":"1. Keep Workflows Modular","text":"<ul> <li>Break large <code>main.nf</code> workflows into separate modules. Example structure: <pre><code>workflows/\n\u2502\u2500\u2500 main.nf\n\u2502\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 preprocess.nf\n\u2502   \u251c\u2500\u2500 analyze.nf\n\u2502   \u251c\u2500\u2500 report.nf\n</code></pre></li> </ul>"},{"location":"best_practices/#2-use-nextflowconfig-for-parameters","title":"2. Use <code>nextflow.config</code> for Parameters","text":"<ul> <li>Store all configuration settings in <code>nextflow.config</code> instead of hardcoding them in <code>main.nf</code>. Example: <pre><code>params {\n    input_dir = 'input/'\n    output_dir = 'output/'\n    max_cpus = 4\n}\n</code></pre></li> </ul>"},{"location":"best_practices/#3-use-containers-for-reproducibility","title":"3. Use Containers for Reproducibility","text":"<p>Docker/Singularity ensures the same environment everywhere.</p> <p><pre><code>process.container = 'freyja:latest'\n</code></pre> Define dependencies in a <code>Dockerfile</code> or <code>environment.yml</code>.</p>"},{"location":"best_practices/#4-document-everything","title":"4. Document Everything","text":"<ul> <li>A clear README should explain how to run the pipeline.</li> <li>Include examples and expected outputs.</li> <li>Use <code>docs/</code> for detailed documentation.</li> </ul>"},{"location":"best_practices/#5-version-control-with-git","title":"5. Version Control with Git","text":"<ul> <li>Use Git to track changes and collaborate efficiently.</li> <li>Add a <code>.gitignore</code> file to exclude large datasets.</li> </ul> <p>Example <code>.gitignore</code>: <pre><code>output/\n.nextflow*\nwork/\n</code></pre></p>"},{"location":"best_practices/#summary","title":"Summary","text":"<p>\u2714 Use a modular structure for better maintainability. \u2714 Define parameters in <code>nextflow.config</code> for flexibility. \u2714 Use containers to ensure reproducibility. \u2714 Document workflows for easy onboarding. \u2714 Version control everything with Git.  </p>"},{"location":"channels/","title":"Understanding Channels in Nextflow","text":""},{"location":"channels/#what-are-channels","title":"What Are Channels?","text":"<p>In nextflow, channels are the main way data moves between processes. They act as data streams, passing files, variables, or other values between processes.  </p> <p>Think of channels as conveyor belts that move data from one process to another. </p>"},{"location":"channels/#types-of-channels","title":"Types of Channels","text":"<p>Channels in Nextflow are one-directional and can be either:</p> <ul> <li>Value Channel \u2013 Hold a single value (e.g., a number or string).</li> <li>Queue Channel \u2013 Hold multiple values and behave like a stream.</li> </ul>"},{"location":"channels/#creating-channels","title":"Creating Channels","text":"<p>Channels can be created using built-in factory factories like <code>Channel.fromSRA()</code>, <code>Channel.fromPath()</code> and <code>Channel.value()</code>.  </p>"},{"location":"channels/#example-1-creating-a-value-channel","title":"Example 1: Creating a value channel","text":"<p><pre><code>sample_ch = Channel.value(2, 4, 8, 10)\n</code></pre> What this does:</p> <ul> <li>Creates a channel containing four values and assigns them to <code>sample_ch</code> varible.</li> <li>The <code>sample_ch</code> can now be passed as input to a process</li> </ul>"},{"location":"channels/#example-2-creating-a-channel-from-files","title":"Example 2: Creating a channel from files","text":"<p><pre><code>fastq_file_ch = Channel.fromPath(\"data/*.fastq\")\n</code></pre> This will create a channel that holds all FASTQ files in the data/ directory.</p>"},{"location":"channels/#how-channels-work-in-a-pipeline","title":"How Channels Work in a Pipeline:","text":"<ul> <li>Channels send data to a process as input.</li> <li>A process modifies the data and sends it to an output channel.</li> <li>The output channel can then be used by another process.</li> </ul>"},{"location":"connect_the_pieces/","title":"Connecting the Pieces: Channels, Modules, and Workflow","text":""},{"location":"connect_the_pieces/#overview","title":"Overview","text":"<p>Now that we\u2019ve created the Nextflow processes (modules) for Freyja, it\u2019s time to bring everything together! In this step, we will:  </p> <ul> <li>Define channels to provide input data to our processes.  </li> <li>Import the two modules (<code>freyja_variants.nf</code> and <code>freyja_demix.nf</code>).  </li> <li>Create a workflow that runs the processes in the correct order.  </li> </ul>"},{"location":"connect_the_pieces/#step-1-creating-input-channels","title":"Step 1: Creating input channels","text":"<p>We need to define two input channels: 1. <code>bamFile_ch</code> \u2013 This channel collects all <code>.BAM</code> files from the <code>data/bam_files/</code> folder. 2. <code>refSeq_ch</code> \u2013 This channel collects the <code>.FASTA</code> reference genome from the <code>data/</code> folder.  </p> <p>Open the <code>main.nf</code> file and add the following:</p> <pre><code>#!/usr/bin/env nextflow\n\nnextflow.enable.dsl=2\n\n// Define channels to provide input data\nbamFile_ch = Channel.fromPath(\"data/bam_files/*.bam\") // Collects all .BAM files\nrefSeq_ch = Channel.fromPath(\"data/*.fasta\")          // Collects the reference genome\n</code></pre> <ul> <li>Here, we are using channel factory <code>Channel.fromPath()</code>` to create channnel and assign it to a variable:</li> <li><code>Channel.fromPath(\"data/bam_files/*.bam\")</code> \u2192 Looks for all <code>.BAM</code> files in <code>data/bam_files/</code>.</li> <li><code>Channel.fromPath(\"data/*.fasta\")</code> \u2192 Looks for the reference genome <code>.FASTA</code> file inside <code>data/</code>.</li> </ul>"},{"location":"connect_the_pieces/#step-2-importing-the-modules-into-mainnf","title":"Step 2: Importing the Modules into <code>main.nf</code>","text":"<p>Now that we have our input channels, we need to import the Freyja modules so we can use them inside <code>main.nf</code>.</p> <p>Why do we need to import modules?</p> <p>Modules are stored in separate <code>.nf</code> files, so we must tell Nextflow where to find them. The <code>include</code> command makes the processes available in <code>main.nf</code>.</p> <p>Add these imports to <code>main.nf</code></p> <pre><code>// Import the two modules into main.nf\ninclude { FREYJA_VARIANTS } from './modules/freyja_variants.nf'\ninclude { FREYJA_DEMIX } from './modules/freyja_demix.nf\n</code></pre> <ul> <li><code>include { FREYJA_VARIANTS } from './modules/freyja_variants.nf'</code> \u2192 This imports the <code>FREYJA_VARIANTS</code> process from <code>freyja_variants.nf</code>.</li> <li><code>include { FREYJA_DEMIX } from './modules/freyja_demix.nf'</code> \u2192 This imports the <code>FREYJA_DEMIX</code> process from <code>freyja_demix.nf</code>.</li> </ul> <p>Now, Nextflow knows where to find our process definitions.</p>"},{"location":"connect_the_pieces/#step-3-creating-the-workflow","title":"Step 3: Creating the Workflow","text":"<p>Let\u2019s now define the workflow, which serves as the entry point of our pipeline. It controls the execution order of processes and passes input between them.</p> <p>Add this to <code>main.nf</code> file:</p> <pre><code>// Define the workflow (entry point of our pipeline)\nworkflow {\n    // Run the first process (FREYJA_VARIANTS) and pass it the input channels\n    FREYJA_VARIANTS(refSeq_ch, bamFile_ch)\n\n    // Run the second process (FREYJA_DEMIX) and pass it the output from the first process\n    FREYJA_DEMIX(FREYJA_VARIANTS.out.variants, FREYJA_VARIANTS.out.depths)\n}\n</code></pre> <p>The first process, <code>FREYJA_VARIANTS</code>, runs first:</p> <ul> <li>It takes a <code>.FASTA</code> reference genome file from the <code>refSeq_ch</code> channel and <code>.BAM</code> files from the <code>bamFile_ch</code> channel as input.</li> <li>It emits variant and depth channels, which contain the output files from the <code>FREYJA_VARIANTS</code> process.</li> </ul> <p>The second process, <code>FREYJA_DEMIX</code>, runs next:</p> <ul> <li>It takes the variant and depth channels from the first process as input.</li> <li>It produces a channel containing a <code>.tsv</code> file with estimated lineage abundances as output.</li> </ul> <p>Note</p> <p>In a Nextflow process, the <code>output</code> section defines what results the process will make available to the workflow.</p> <ul> <li>In the <code>FREYJA_VARIANTS</code> process, we emit two named outputs channels:  </li> <li><code>variants</code> \u2192 <code>${bam_basename}.variants, emit: variants</code> file  </li> <li><code>depths</code> \u2192 <code>${bam_basename}.depths emit: depths</code> file  </li> </ul> <p>To access these outputs channels in the workflow, we use <code>PROCESS_NAME.out.&lt;channel_name&gt;</code>:</p> <ul> <li><code>FREYJA_VARIANTS.out.variants</code> refers to the variants output channel.  </li> <li><code>FREYJA_VARIANTS.out.depths</code> refers to the depths output channel.  </li> </ul> <p>If no names were assigned using <code>emit</code>, then <code>FREYJA_VARIANTS.out</code> would return all outputs as a single channel.  </p> <p>Here is how your final main.nf file should look:</p> <pre><code>#!/usr/bin/env nextflow\n\nnextflow.enable.dsl=2\n\n// Import the two modules into main.nf\ninclude { FREYJA_VARIANTS } from './modules/freyja_variants.nf'\ninclude { FREYJA_DEMIX } from './modules/freyja_demix.nf'\n\n// Define the workflow (entry point of our pipeline)\nworkflow {\n\n    // Define channels to provide input data\n    bamFile_ch = Channel.fromPath(\"data/bam_files/*.bam\") // Collects all .BAM files\n    refSeq_ch = Channel.fromPath(\"data/*.fasta\")          // Collects the reference genome\n\n    // Run the first process (FREYJA_VARIANTS) and pass it the input channels\n    FREYJA_VARIANTS(refSeq_ch, bamFile_ch)\n\n    // Run the second process (FREYJA_DEMIX) and pass it the output from the first process\n    FREYJA_DEMIX(FREYJA_VARIANTS.out.variants, FREYJA_VARIANTS.out.depths)\n}\n</code></pre> <p>Next, we will run the pipeline and test if everything works correctly!</p>"},{"location":"customizing_parameters/","title":"Customizing Parameters in Nextflow","text":""},{"location":"customizing_parameters/#overview","title":"Overview","text":"<p>So far, we've hardcoded file paths and settings in our pipeline. This works but isn\u2019t very flexible. Now, we\u2019ll make our pipeline more configurable by using parameters.  </p> <ul> <li>Define parameters in <code>nextflow.config</code>.  </li> <li>Use them in <code>main.nf</code>.  </li> <li>Run the pipeline with custom values.  </li> </ul>"},{"location":"customizing_parameters/#step-1-adding-parameters-to-nextflowconfig","title":"Step 1: Adding Parameters to <code>nextflow.config</code>","text":"<p>Open (or create) the <code>nextflow.config</code> file and define parameters:  </p> <pre><code>params {\n    bam_dir = 'data/bam_files/'   // Folder with BAM files\n    ref_genome = 'data/ref_genome.fasta'  // Reference genome file\n    outdir = ${projectDir}/Results\n}\n</code></pre> <p>Why use parameters?</p> <p>Makes it easy to change input files without editing the script.</p> <p>Allows users to override values when running the pipeline.</p>"},{"location":"customizing_parameters/#step-2-using-parameters-in-mainnf","title":"Step 2: Using Parameters in <code>main.nf</code>","text":"<p>Now, update <code>main.nf</code> to use these parameters instead of hardcoded paths.</p> <pre><code>#!/usr/bin/env nextflow\n\nnextflow.enable.dsl=2\n\n// Define channels using parameters\nbamFile_ch = Channel.fromPath(\"${params.bam_dir}/*.bam\")\nrefSeq_ch = Channel.fromPath(params.ref_genome)\n\n// Import modules\ninclude { FREYJA_VARIANTS } from './modules/freyja_variants.nf'\ninclude { FREYJA_DEMIX } from './modules/freyja_demix.nf'\n\n// Workflow\nworkflow {\n    FREYJA_VARIANTS(refSeq_ch, bamFile_ch)\n    FREYJA_DEMIX(FREYJA_VARIANTS.out.variants, FREYJA_VARIANTS.out.depth)\n}\n</code></pre> <p>What changed?</p> <ul> <li>Instead of hardcoded paths (data/bam_files/*.bam), we use params.bam_dir.</li> <li>Instead of data/ref_genome.fasta, we use params.ref_genome.</li> </ul> <p>Now, we can easily update file paths by changing nextflow.config.</p>"},{"location":"customizing_parameters/#step-3-overriding-parameters-at-runtime","title":"Step 3: Overriding Parameters at Runtime","text":"<p>Instead of editing nextflow.config, we can pass parameters when running the pipeline.</p> <p>For example:</p> <p><pre><code>nextflow run main.nf --bam_dir my_data/bams --ref_genome my_data/genome.fasta --outdir my_results\n</code></pre> What happens here?</p> <ul> <li> <p><code>--bam_dir</code> overrides the default <code>params.bam_dir</code>.</p> </li> <li> <p><code>--ref_genome</code> replaces <code>params.ref_genome</code>.</p> </li> </ul> <p>This makes the pipeline more dynamic and reusable across different datasets.</p>"},{"location":"customizing_parameters/#step-4-checking-parameter-values","title":"Step 4: Checking Parameter Values","text":"<p>If you\u2019re unsure what values are being used, add this to main.nf:</p> <pre><code>log.info \"Using BAM directory: ${params.bam_dir}\"\nlog.info \"Using reference genome: ${params.ref_genome}\"\n</code></pre> <p>Now, when you run the pipeline, it prints:</p> <pre><code>N E X T F L O W  ~  version 22.10.1\nUsing BAM directory: my_data/bams\nUsing reference genome: my_data/genome.fasta\n</code></pre>"},{"location":"demix/","title":"Writing <code>freyja_demix.nf</code> Module","text":""},{"location":"demix/#step-2-writing-the-freyja_demixnf-module","title":"Step 2: Writing the <code>freyja_demix.nf</code> Module","text":"<p>In this step, we will define the <code>freyja_demix.nf</code> module, which contains the <code>FREYJA_DEMIX</code> process. This module takes the output from <code>freyja_variant.nf</code> module and further analyzes it.</p> <p>The module:</p> <ul> <li>Accepts a <code>.variant</code> file and a <code>.depths</code> file as input.</li> <li>Runs <code>freyja demix</code> command.</li> <li>Produces a <code>.tsv</code> file containing the final results.</li> </ul> <p>Use your preferred text editor to edit <code>freyja_demix.nf</code> file or run: </p> <pre><code>nano modules/freyja_demix.nf\n</code></pre> <p>Here is the full Code for <code>FREYJA_DEMIX</code></p> <pre><code>process FREYJA_DEMIX {\n\n    input:\n        path variant_file\n        path depth_file\n\n    output:\n        path \"${sample_basename}.tsv\"\n\n    script:\n    sample_basename = variant_file.simpleName\n\n        \"\"\"\n        freyja demix $variant_file $depth_file --output ${sample_basename}.tsv\n        \"\"\"\n}\n</code></pre> <p>Let's break it down:</p>"},{"location":"demix/#process-name","title":"Process name","text":"<pre><code>    process FREYJA_DEMIX  { }\n</code></pre> <ul> <li>The process is named after the tool it runs (FREYJA_DEMIX).</li> <li>The curly braces <code>{}</code> enclose the process logic.</li> </ul>"},{"location":"demix/#declaring-the-input-files","title":"Declaring the Input Files","text":"<pre><code>    input:\n        path variant_file\n        path depth_file\n</code></pre> <ul> <li><code>variant_file</code> \u2013 The .variant file generated by the <code>freyja_variant.nf</code> module</li> <li><code>depth_file</code> \u2013 The .depths file generated by the <code>freyja_variant.nf</code> module</li> <li>These files serve as inputs for <code>FREYJA_DEMIX</code> process which analyzes the data.</li> </ul>"},{"location":"demix/#declaring-the-output-file","title":"Declaring the Output File","text":"<pre><code>    output:\n        path \"${sample_basename}.tsv\"\n</code></pre> <ul> <li>The <code>FREYJA_DEMIX</code> process creates a channel for the generates <code>.tsv</code> file</li> </ul>"},{"location":"demix/#running-the-command-script-section","title":"Running the Command (Script Section)","text":"<p>This is where the Freyja command is executed.</p> <pre><code>    script:\n    sample_basename = variant_file.baseName\n\n    \"\"\"\n    freyja demix $variant_file $depth_file --output ${sample_basename}.tsv\n    \"\"\"\n</code></pre> <ul> <li><code>sample_basename</code> = <code>variant_file.baseName</code> \u2192 Extracts the filename (without extension).</li> <li>Calls <code>freyja demix</code> with the variant and depth files as inputs.</li> <li><code>$variant_file</code> and <code>$depth_file</code> \u2192 Access input files inside the script.</li> <li><code>${sample_basename}.tsv</code> \u2192 Defines the output file dynamically.</li> <li>Triple quotes (\"\"\") allow multi-line commands, making the script easier to read.</li> </ul> <p>Now, save your changes to the freyja_demix.nf module!</p>"},{"location":"environment_setup/","title":"Setting Up Nextflow and Freyja","text":"<p>Before we start building workflows, let\u2019s set up our environment by installing Nextflow and Freyja.</p>"},{"location":"environment_setup/#prerequisites","title":"Prerequisites","text":"<p>make sure you have:</p> <ul> <li>A Linux or macOS system (Windows users can use WSL, a Linux environment for Windows).</li> <li>Conda, a tool that makes managing software and dependencies easy, should be installed. If you don\u2019t have it yet, follow the official installation guide.</li> </ul>"},{"location":"environment_setup/#step-1-installing-nextflow-and-freyja-via-conda","title":"Step 1: Installing Nextflow and Freyja via Conda","text":"<p>Once Conda is set up, create a new environment named training-tutorial with Python 3.10 by running:</p> <pre><code>conda create -n training-tutorial python=3.10 -y\n</code></pre>"},{"location":"environment_setup/#step-2-activate-the-environment","title":"Step 2: Activate the Environment","text":"<p>Before installing software, activate your new environment: <pre><code>conda activate training-tutorial\n</code></pre></p>"},{"location":"environment_setup/#step-3-install-nextflow","title":"Step 3: Install nextflow","text":"<p>Nextflow is a tool for managing workflows. Install it by running:</p> <pre><code>conda install bioconda::nextflow -y\n</code></pre>"},{"location":"environment_setup/#step-4-install-freyja","title":"Step 4: Install freyja","text":"<p>Freyja is used for lineage analysis. Install it with:</p> <pre><code>conda install bioconda::freyja -y\n</code></pre>"},{"location":"environment_setup/#step-5-install-pyarrow-a-required-dependency","title":"Step 5: Install pyarrow (a required dependency)","text":"<p>Freyja needs pyarrow to work properly. Install it using:</p> <pre><code>conda install anaconda::pyarrow -y\n</code></pre>"},{"location":"environment_setup/#step-6-verify-installation","title":"Step 6: Verify installation","text":"<p>Once installed, check if everything is working by running:</p> <pre><code>nextflow -version\n</code></pre> <p>output: <pre><code>      N E X T F L O W\n      version 24.10.5 build 5935\n      created 04-03-2025 17:55 UTC (20:55 EAST)\n      cite doi:10.1038/nbt.3820\n      http://nextflow.io\n</code></pre></p> <p><pre><code>freyja --version\n</code></pre> output: <pre><code>freyja, version 1.5.3\n</code></pre></p> <p>If these commands display version information, your setup is complete!</p>"},{"location":"freyja_basics/","title":"Introduction to Freyja","text":"<p>Freyja is a tool for analyzing SARS-CoV-2 sequencing data. It helps identify viral lineages and estimate their relative abundances by processing variant data from sequencing reads. It is typically used after primer trimming and variant calling.</p>"},{"location":"freyja_basics/#why-use-freyja","title":"Why Use Freyja?","text":"<ul> <li>Accurate Variant Analysis \u2013 Identifies SARS-CoV-2 variants in sequencing data.  </li> <li>Computationally Efficient \u2013 Fast processing of large sequencing datasets.  </li> <li>Integrates with Nextflow \u2013 Can be automated in bioinformatics pipelines.  </li> </ul>"},{"location":"freyja_basics/#understanding-freyja-commands","title":"Understanding Freyja Commands","text":"<p>Freyja provides several commands for analyzing sequencing data. In this tutorial, we will focus on three key commands:</p> <ul> <li><code>freyja variants</code> \u2013 This command analyzes a BAM file to identify genetic variants using samtools and iVar</li> <li><code>freyja demix</code> \u2013 Estimates the relative abundances of viral lineages.</li> </ul> <p>These commands form the foundation of the Nextflow pipeline we will build in the next section.</p>"},{"location":"freyja_basics/#running-freyja-commands","title":"Running Freyja Commands","text":"<p>Now that we understand the key Freyja commands, let's see how they are executed.</p>"},{"location":"freyja_basics/#running-freyja-variants-command","title":"Running <code>freyja variants</code> command","text":"<p>This command extracts variant and depth information from a sequencing dataset. <pre><code>freyja variants sample1.bam \\\n  --variants sample1_variants.tsv \\\n  --depths sample1.depths \\\n  --ref ref_genome.fasta\n</code></pre> Breakdown:</p> <ul> <li>sample1.bam \u2013 Input BAM file containing aligned sequencing reads.</li> <li><code>--variants</code> sample1_variants.tsv \u2013 Output file storing variant information.</li> <li><code>--depths</code> sample1.depth \u2013 Output file storing sequencing depth information.</li> <li><code>--ref</code> ref_genome.fasta \u2013 input Reference genome file to align against.</li> </ul> <p>Note</p> <p>The <code>freyja variants</code> command above takes 2 input files: a BAM file (sequencing data) and a FASTA file (reference genome). It produces 2 output files: a .depth file (sequencing depth information) and a .tsv file (variant details).</p>"},{"location":"freyja_basics/#running-freyja-demixcommand","title":"Running <code>freyja demix</code>command","text":"<p>Once we have the variant and depth files, we can estimate lineage abundances.</p> <p><pre><code>freyja demix sample1_variants.tsv sample1.depth \\\n--output sample_id.demix.tsv\n</code></pre> Breakdown:</p> <ul> <li>sample1_variants.tsv \u2013 Input variant file from freyja variants.</li> <li>sample1.depth \u2013 Input depth file from freyja variants.</li> <li><code>--output</code> sample1_demix.tsv \u2013 Output file storing detected lineages, their relative abundances, and a summary based on known variant groups. .</li> </ul> <p>Note</p> <p>The <code>freyja demix</code> command above takes 2 input files: a .depth file (sequencing depth information) and a .tsv file (variant details) and generates 1 .tsv output file (relative abundance): </p> <p>Since we've covered two key Freyja commands, we can now integrate them into a Nextflow pipeline to reinforce Nextflow concepts.</p>"},{"location":"module_overview/","title":"Writing Nextflow Modules for Freyja","text":""},{"location":"module_overview/#overview","title":"Overview","text":"<p>Now that we\u2019ve created Nextflow processes, let's organize them using modules.  </p>"},{"location":"module_overview/#what-is-a-module","title":"What is a Module?","text":"<p>A module in Nextflow is simply a separate file that contains a process. Using modules helps to:</p> <ul> <li>Keep the pipeline organized \u2013 Each process has its own file.  </li> <li>Improve reusability \u2013 We can use the same process in different workflows.  </li> <li>Make debugging easier \u2013 If something goes wrong, it's easier to find the issue.  </li> </ul> <p>Instead of putting everything in one big <code>main.nf</code> file, we separate each process into its own module.  </p>"},{"location":"module_overview/#creating-nextflow-modules","title":"Creating Nextflow Modules","text":"<p>We will create two modules, each containing one Nextflow process:</p> Module Process Name Function <code>freyja_variants.nf</code> <code>FREYJA_VARIANTS</code> Extracts sequencing depth and variant data from a <code>.BAM</code> file. <code>freyja_demix.nf</code> <code>FREYJA_DEMIX</code> Analyzes variants to estimate the relative abundance of viral lineages."},{"location":"module_overview/#why-use-separate-module-files","title":"Why Use Separate Module Files?","text":"<p>Imagine writing everything inside <code>main.nf</code>, it would become messy and hard to manage.  </p> <p>By separating each process into its own file, we get:</p> <ul> <li>Better readability \u2013 Each module handles one specific task.  </li> <li>Easier maintenance \u2013 If we need to update one process, we modify only that module.  </li> <li>Reusability \u2013 The same module can be used in different pipelines.</li> </ul> <p>Note</p> <p>Naming conventions for Nextflow modules </p> <p>While not mandatory, it's common practice to: - Name modules after the tool they run (e.g., <code>freyja_variants.nf</code> for <code>freyja variants</code>). - Use UPPERCASE for process names to make them easily recognizable.  </p> <p>Example: - <code>freyja_variants.nf</code> \u2192 <code>FREYJA_VARIANTS</code> - <code>freyja_demix.nf</code> \u2192 <code>FREYJA_DEMIX</code> </p> <p>This improves readability and makes it clear what each module does.  </p> <p>Now that we understand why we use modules, let\u2019s start writing them!  </p>"},{"location":"nextflow_overview/","title":"Introduction to nextflow","text":"<p>Nextflow is a workflow management system designed to build and run computational pipelines. It is widely used in bioinformatics, data science, and HPC (High-Performance Computing).</p>"},{"location":"nextflow_overview/#why-use-nextflow","title":"Why use nextflow?","text":"<p>Nextflow makes workflows:</p> <ul> <li>Reproducible \u2013 Ensures pipelines run the same way on different systems.  </li> <li>Scalable \u2013 Works on laptops, HPC clusters, and cloud environments.  </li> <li>Modular \u2013 Pipelines are broken into reusable processes (modules).  </li> <li>Parallelized \u2013 Automatically runs tasks in parallel when possible.  </li> </ul>"},{"location":"nextflow_overview/#nextflow-script-basics","title":"Nextflow script basics","text":"<p>A Nextflow pipeline is written in nextflow DSL2 (Domain-Specific Language 2). Let's look at a simple example:</p>"},{"location":"nextflow_overview/#example-hello-world-in-nextflow","title":"Example: Hello World in Nextflow","text":"<pre><code>#!/usr/bin/env nextflow     \n\nnextflow.enable.dsl=2\n\nprocess sayHello {\n    output:\n    stdout\n\n    script:\n    \"\"\"\n    echo \"Hello, World!\"\n    \"\"\"\n}\n\nworkflow {\n    sayHello().view()\n}\n</code></pre>"},{"location":"nextflow_overview/#breaking-it-down","title":"Breaking it down:","text":"<ul> <li><code>#!/usr/bin/env nextflow</code> This tells the system to use Nextflow to execute the script. </li> <li><code>nextflow.enable.dsl=2</code> Enables Nextflow DSL2, which is the latest and most flexible version. </li> <li>Defining a process (<code>process sayHello { ... }</code>) A process is a unit of execution. In this case, it runs a small shell command. </li> <li> <p>The script section contains the actual command: <pre><code>echo \"Hello, World!\"\n</code></pre></p> </li> <li> <p>Output section (<code>output: stdout</code>) Captures the output of the process, in this case, the text \"Hello, World!\". </p> </li> <li>Defining a workflow: <pre><code>workflow { \n    sayHello().view() \n}\n</code></pre> The workflow section defines how processes run. In larger pipelines, this is where you define how different processes connect. Here, it calls <code>sayHello()</code> process and <code>.view()</code> displays its output to the terminal.</li> </ul>"},{"location":"nextflow_overview/#running-your-first-nextflow-script","title":"Running your first nextflow script","text":"<p>Save this script as <code>hello.nf</code> and run it with:</p> <pre><code>nextflow run hello.nf\n</code></pre>"},{"location":"nextflow_overview/#expected-output","title":"Expected Output","text":"<p>If everything is set up correctly, you should see something like this:</p> <pre><code> N E X T F L O W   ~  version 24.10.5\n\nLaunching `hello.nf` [drunk_gates] DSL2 - revision: c2fd982266\n\nexecutor &gt;  local (1)\n[d4/99ae5a] sayHello | 1 of 1 \u2714\nHello, World!\n</code></pre> <p>This confirms that the sayHello process ran successfully once (1 of 1 \u2714).</p>"},{"location":"operators/","title":"Understanding Operators in Nextflow","text":""},{"location":"operators/#what-are-operators","title":"What Are Operators?","text":"<p>Operators in Nextflow allow you to manipulate and transform data as it flows through channels. They help modify, filter, and combine data before passing it to a process.  </p>"},{"location":"operators/#commonly-used-operators","title":"Commonly Used Operators","text":"Operator Description Example <code>map</code> Transforms each element in a channel Convert file names to uppercase <code>filter</code> Selects elements that match a condition Keep only <code>.txt</code> files <code>collect</code> Gathers all elements into a single list Collect all sample names <code>flatten</code> Flattens nested lists into a single list Convert list of lists into one <code>groupTuple</code> Groups data into pairs Pair samples with metadata"},{"location":"operators/#example-1-using-map-to-transform-data","title":"Example 1: Using <code>map</code> to transform data","text":"<p>The <code>map</code> operator applies a function to every element in a channel.  </p> <p><pre><code>Channel.from(\"sample1.txt\", \"sample2.txt\", \"sample3.txt\")\n    | map { it.toUpperCase() }\n    | view()\n</code></pre> Output: <pre><code>SAMPLE1.TXT  \nSAMPLE2.TXT  \nSAMPLE3.TXT  \n</code></pre></p>"},{"location":"operators/#example-2-using-filter-to-select-data","title":"Example 2: Using <code>filter</code> to select data","text":"<p>The <code>filter</code> operator removes unwanted elements based on a condition. <pre><code>Channel.from(\"data1.txt\", \"image.png\", \"data2.txt\")\n    | filter { it.endsWith('.txt') }\n    | view()\n</code></pre> Output: <pre><code>data1.txt  \ndata2.txt  \n</code></pre></p>"},{"location":"operators/#example-3-using-grouptuple-to-organize-data","title":"Example 3: Using <code>groupTuple</code> to Organize Data","text":"<p>The <code>groupTuple</code> operator groups elements into structured tuples. <pre><code>Channel.from([\"A\", \"B\", \"C\"], [1, 2, 3])\n    | groupTuple()\n    | view()\n</code></pre> Output: <pre><code>[A, 1]  \n[B, 2]  \n[C, 3]  \n</code></pre></p> <p>Note</p> <p>In Nextflow, you can connect channels and operators using the pipe (<code>|</code>) symbol. The <code>view</code> operator is one example of an operator that processes and displays data in a pipeline.</p>"},{"location":"pipeline_overview/","title":"Building a Nextflow Pipeline with Freyja","text":""},{"location":"pipeline_overview/#overview","title":"Overview","text":"<p>In this section, we'll build a Nextflow pipeline that integrates Freyja commands. This pipeline will have two key steps:</p> <ol> <li>Variant Extraction \u2013 Uses <code>freyja variants</code> command to identify mutations and calculate sequencing depth from <code>.BAM</code> files.</li> <li>Lineage Analysis \u2013 Uses <code>freyja demix</code> command to estimate the relative abundance of viral lineages.</li> </ol>"},{"location":"pipeline_overview/#pipeline-structure","title":"Pipeline Structure","text":"<p>The pipeline follows this directory structure:</p> <pre><code>training/\n\u2502-- main.nf\n\u2502-- nextflow.config\n|-- modules/\n|   \u251c\u2500\u2500 freyja_variants.nf \n|   \u251c\u2500\u2500 freyja_demax.nf \n\u2502-- data/\n\u2502   \u251c\u2500\u2500 ref_genome.fasta\n\u2502   \u251c\u2500\u2500 bam_files/\n\u2502   \u2502   \u251c\u2500\u2500 sample1.bam\n\u2502   \u2502   \u251c\u2500\u2500 sample2.bam\n\u2502   \u2502   \u251c\u2500\u2500 sample3.bam\n</code></pre>"},{"location":"pipeline_overview/#what-each-file-does","title":"What Each File Does","text":"File/Folder Description <code>main.nf</code> Defines the workflow, linking different processes. <code>nextflow.config</code> Stores settings like memory, CPU, and container options. <code>modules/</code> Contains Nextflow modules for different tasks. <code>freyja_variants.nf</code> Runs <code>freyja variants</code> to extract mutations &amp; depth data. <code>freyja_demix.nf</code> Runs <code>freyja demix</code> to estimate lineage abundances. <code>data/</code> Stores input files like <code>reference genome</code> and <code>.BAM</code> files. <p>Now that we understand the pipeline structure, let's set up the project step by step. </p>"},{"location":"processes/","title":"Understanding Processes in Nextflow","text":""},{"location":"processes/#what-are-processes","title":"What Are Processes?","text":"<p>A process in Nextflow is a unit of execution that:</p> <ul> <li>Runs a specific command or script.  </li> <li>Takes input from a channel.  </li> <li>Produces an output, which is sent to a new channel.  </li> </ul> <p>Processes are isolated from each other, often run in parallel and communicate only through channels.</p>"},{"location":"processes/#basic-structure-of-a-process","title":"Basic structure of a process","text":"<p>A process follows this structure:  </p> <pre><code>process NAME {\n    input:\n    &lt;input definition&gt; // input variable\n\n    output:\n    &lt;output definition&gt; // output variable\n\n    script:\n    \"\"\"\n    &lt;commands to execute&gt;\n    \"\"\"\n}\n</code></pre> <p>Each process has: </p> <ul> <li>A NAME - name of the process</li> <li>An Input \u2013 data coming from a channel.  </li> <li>Execution Block \u2013 Runs the given script/command.  </li> <li>Output \u2013 Sent data to an output channel.  </li> </ul>"},{"location":"processes/#example-1-a-simple-process","title":"Example 1: A simple process","text":"<p><pre><code>process countBases {\n    input:\n    path sample_file\n\n    output:\n    path \"output_file.count\"\n\n    script:\n    \"\"\"\n    wc -c $sample_file &gt; output_file.count\n    \"\"\"\n}\n</code></pre> Here:</p> <ul> <li>The process <code>countBases</code> defines a variable called <code>samples_file</code>, which holds the path to a file received through a <code>queue channel</code>.</li> <li>It then executes the <code>wc -c</code> command in the <code>script</code> section to generate the <code>output_file.count</code> that is made available through another channel.</li> </ul>"},{"location":"project_setup/","title":"Setting Up the Project Structure","text":"<p>Before running our Nextflow pipeline, let's create the necessary files and directories step by step.  </p>"},{"location":"project_setup/#step-1-create-the-main-project-directory","title":"Step 1: Create the Main Project Directory","text":"<p>First, create a new directory for the pipeline and navigate into it:</p> <p><pre><code>mkdir training  \ncd training  \n</code></pre> This will be the root directory where all pipeline files will be stored.</p>"},{"location":"project_setup/#step-2-create-the-main-pipeline-script","title":"Step 2: Create the Main Pipeline Script","text":"<p>Next, create the <code>main.nf</code> file, which will define the workflow:</p> <pre><code>touch main.nf  \n</code></pre> <p>This script will later contain the workflow definition that links different processes.</p>"},{"location":"project_setup/#step-3-create-the-configuration-file","title":"Step 3: Create the Configuration File","text":"<p>Now, create <code>nextflow.config</code>, which will store pipeline settings such as memory, CPU, and execution options.</p> <pre><code>touch nextflow.config  \n</code></pre>"},{"location":"project_setup/#step-4-create-the-modules-directory","title":"Step 4: Create the Modules Directory","text":"<p>To organize the pipeline, we'll store different steps as Nextflow modules inside a modules/ directory:</p> <p><pre><code>mkdir modules  \ntouch modules/freyja_variants.nf  \ntouch modules/freyja_demix.nf\n</code></pre> Each of these <code>.nf</code> files will contain a Nextflow process for running Freyja commands.</p>"},{"location":"project_setup/#step-5-set-up-the-data-directory","title":"Step 5: Set Up the Data Directory","text":"<p>Download the test data (a compressed archive file):</p> <p><pre><code>wget https://github.com/samordil/nextflow-freyja-tutorial/raw/refs/heads/main/data.tar.gz \n</code></pre> Extract the archive to create the data directory:</p> <pre><code>tar xzf data.tar.gz\n</code></pre> <p>Remove the archive file (to save space, since we don\u2019t need it anymore): <pre><code>rm  data.tar.gz\n</code></pre></p> <p>Now that we\u2019ve set up the project, let's start writing the Nextflow modules!</p>"},{"location":"running_pipeline/","title":"Running and Testing the Nextflow Pipeline","text":""},{"location":"running_pipeline/#overview","title":"Overview","text":"<p>Now that we've set up our Nextflow pipeline, it's time to run it and see if everything works! In this section, we will:  </p> <ul> <li>Run the pipeline step by step.  </li> <li>Check that our processes execute correctly.  </li> <li>Troubleshoot any potential errors.  </li> </ul>"},{"location":"running_pipeline/#step-1-running-the-pipeline","title":"Step 1: Running the Pipeline","text":"<p>From your terminal run:  </p> <pre><code>nextflow run main.nf\n</code></pre> <p>Nextflow will execute the pipeline and display progress messages:</p> <p><pre><code> N E X T F L O W   ~  version 24.10.5\n\nLaunching `main.nf` [nasty_gautier] DSL2 - revision: 43eb342fc2\n\nexecutor &gt;  local (6)\n[c0/b014cd] FREYJA_VARIANTS (3) [100%] 3 of 3 \u2714\n[7e/b05de0] FREYJA_DEMIX (2)    [100%] 3 of 3 \u2714\n</code></pre> If you see \u2714 for all processes, congratulations\u2014your pipeline ran successfully!</p> <p>Let's break down what each part means:</p> <ul> <li><code>N E X T F L O W ~ version 24.10.5</code> \u2192 Confirms the Nextflow version you're using.</li> </ul> <ul> <li><code>Launching main.nf [nasty_gautier] DSL2 - revision: 43eb342fc2</code> \u2192 Shows that Nextflow is running main.nf using DSL2.</li> </ul> <ul> <li><code>executor &gt; local (6)</code> \u2192 Tells you that Nextflow is running processes on your local machine. The number (6) indicates the total number of tasks executed.</li> </ul> <ul> <li><code>[c0/b014cd] FREYJA_VARIANTS (3) [100%] 3 of 3 \u2714</code> \u2192 Process Execution Progress. The FREYJA_VARIANTS process completed all 3 tasks successfully.  <ul> <li><code>[c0/b014cd]</code> \u2192 Unique task ID, useful for locating outputs in the <code>work/</code> directory.  </li> <li><code>FREYJA_VARIANTS</code> \u2192 The process name being executed.  </li> <li><code>(3)</code> \u2192 The last task label that was run. Since there are 3 samples, Nextflow runs 3 parallel tasks.  </li> </ul> </li> </ul> <ul> <li><code>[7e/b05de0] FREYJA_DEMIX (2) [100%] 3 of 3 \u2714</code> \u2192 Similar to FREYJA_VARIANTS, this line confirms that the FREYJA_DEMIX process also completed all tasks successfully.</li> </ul>"},{"location":"running_pipeline/#step-2-checking-output-files","title":"Step 2: Checking Output Files","text":"<p>After the pipeline finishes running, you can check the generated output files. These files will be stored in the work/ directory and the specified output paths.</p>"},{"location":"running_pipeline/#viewing-process-output","title":"Viewing Process Output","text":"<p>To check the output of a specific process, first, copy its unique task ID and use the ls command. For example:</p> <pre><code>ls work/c0/b014cd\n</code></pre> <p>Press the Tab key to auto-complete the path, then press Enter. You should see output similar to this for one of the FREYJA_DEMIX tasks:</p> <pre><code>variant.tsv  data\n</code></pre> <p>If you want to view the contents of a file, use the less command instead of ls:</p> <pre><code>less work/c0/b014cd/variant.tsv\n</code></pre> <p>This will display the contents of the file, for example:</p> <pre><code>    sample.variants.tsv\nsummarized  [('Other', 0.9999999999188374)]\nlineages    B.1.160.22\nabundances  1.00000000\nresid   4.696910204950047\ncoverage    10.597598903120089\n</code></pre> <p>Now, let\u2019s move on to organizing the output files from different processes and using custom parameters to refine our pipeline.</p>"},{"location":"variant/","title":"Writing <code>freyja_variants.nf</code> Module","text":""},{"location":"variant/#step-1-writing-the-freyja_variantsnf-module","title":"Step 1: Writing the <code>freyja_variants.nf</code> Module","text":"<p>In this step, we will define the <code>freyja_variants.nf</code> module, which contains the <code>FREYJA_VARIANTS</code> process. This module:</p> <ul> <li>Takes a .BAM file and a FASTA file as input.</li> <li>Runs the <code>freyja variants</code> command to extract variant and depth information.</li> <li>Produces <code>.variants</code> and <code>.depths</code> files as output.</li> </ul> <p>Use your preferred text editor to edit <code>freyja_variants.nf</code> file or run:  </p> <pre><code>nano modules/freyja_variants.nf\n</code></pre> <p>Here is the full code for the FREYJA_VARIANTS process:</p> <pre><code>process FREYJA_VARIANTS {\n\n    input:\n        path fasta_file\n        each path(bam_file)\n\n    output:\n        path \"${bam_basename}.variants.tsv\", emit: variants\n        path \"${bam_basename}.depths\", emit: depths\n\n    script:\n    bam_basename = bam_file.simpleName\n\n    \"\"\"\n    freyja variants $bam_file \\\n        --ref $fasta_file \\\n        --variants ${bam_basename}.variants \\\n        --depths ${bam_basename}.depths\n    \"\"\"\n}\n</code></pre>"},{"location":"variant/#breaking-it-down-step-by-step","title":"Breaking it Down step by step","text":""},{"location":"variant/#process-definition","title":"Process Definition","text":"<p>Every Nextflow process starts with the <code>process</code> keyword, followed by a name (written in uppercase).</p> <pre><code>process FREYJA_VARIANTS { }\n</code></pre> <ul> <li>Naming convention: The process is named after the tool it runs (FREYJA_VARIANTS).</li> <li>The curly braces <code>{}</code> enclose the process logic.</li> </ul>"},{"location":"variant/#defining-inputs","title":"Defining Inputs","text":"<p>The input section specifies what files the process needs.</p> <pre><code>    input:\n        path fasta_file\n        each path(bam_file)\n</code></pre> <ul> <li>These files will be received from a channel.</li> <li><code>path fasta_file</code> \u2192 The reference genome file (shared across samples).</li> <li><code>each path(bam_file)</code> \u2192 Represents a BAM file containing aligned sequencing reads.</li> <li>The <code>each</code> keyword ensures that the process runs individually for each BAM file using the same reference file.</li> </ul>"},{"location":"variant/#defining-outputs","title":"Defining Outputs","text":"<p>The output section specifies the channel that will be made available for other processes or workflows.</p> <pre><code>    output:\n        path \"${bam_basename}.variants.tsv\", emit: variants\n        path \"${bam_basename}.depths\", emit: depths\n</code></pre> <ul> <li><code>${bam_basename}.variants.tsv</code> \u2192 Contains detected genetic variants.</li> <li><code>${bam_basename}.depths</code> \u2192 Stores sequencing depth information.</li> <li><code>emit</code> labels (<code>variants</code> and <code>depths</code>) allow other processes to reference these outputs.</li> </ul>"},{"location":"variant/#writing-the-command-script-section","title":"Writing the Command (Script Section)","text":"<p>This is where the actual Freyja command is executed.</p> <pre><code>    script:\n    bam_basename = bam_file.baseName\n\n    \"\"\"\n    freyja variants $bam_file \\\n        --ref $fasta_file \\\n        --variants ${bam_basename}.variants \\\n        --depths ${bam_basename}.depths\n    \"\"\"\n</code></pre> <ul> <li><code>bam_basename</code> = <code>bam_file.simpleName</code> \u2192 Extracts the filename (without extension) to create meaningful output names.</li> <li><code>$bam_file</code> and <code>$fasta_file</code> \u2192 Access input variables.</li> <li><code>${variant_file}.variants</code> and <code>${depth_file}.depths</code> \u2192 Define output filenames.</li> <li>Triple quotes (\"\"\") allow multi-line commands for better readability.</li> </ul> <p>Note</p> <p>To access variables in a nextflow process, use <code>$variable_name</code>. To add suffixes or prefixes, enclose the variable in <code>{}</code> \u2192 <code>${depth_file}.depths</code>.</p> <p>Now, save your changes to the freyja_variants.nf module!</p>"},{"location":"workflows/","title":"Understanding Workflows in Nextflow","text":""},{"location":"workflows/#what-is-a-workflow","title":"What is a Workflow?","text":"<p>A workflow in Nextflow is like a blueprint that defines how processes, channels, and operators interact. It controls the flow of data and execution in your pipeline.</p> <p>Workflows help:</p> <ul> <li>Structure pipelines \u2013 Define the execution order of processes.  </li> <li>Reuse code \u2013 Use named workflows multiple times.  </li> <li>Improve readability \u2013 Keep complex pipelines manageable.  </li> </ul>"},{"location":"workflows/#types-of-workflows","title":"Types of Workflows","text":"<p>There are two types of workflows:  </p> <ul> <li>Entry Workflow \u2013 The main workflow that runs when you execute the script.  </li> <li>Named Workflows \u2013 Workflows that can be reused and called from other workflows.</li> </ul>"},{"location":"workflows/#entry-workflow-main-workflow","title":"Entry Workflow (Main Workflow)","text":"<p>Every Nextflow script has one entry workflow that acts as the starting point of execution.  </p> <p>Example: A simple workflow that adds \"world!\" to different greetings.  </p> <p><pre><code>workflow {\n    Channel.of('Bonjour', 'Ciao', 'Hello', 'Hola')\n        | map { v -&gt; \"$v world!\" }\n        | view\n}\n</code></pre>  How it works:</p> <ul> <li>A channel is created with greetings.</li> <li>The map operator modifies each greeting by adding \"world!\".</li> <li>The view operator prints the output.</li> </ul> <p>output: <pre><code>Bonjour world!\nCiao world!\nHello world!\nHola world!\n</code></pre></p> <p>Named Workflows (Reusable Workflows) A named workflow is a reusable workflow that can be called inside other workflows, making pipelines modular and structured.</p> <p>Example: Connecting two workflows:</p> <pre><code>workflow my_workflow {\n    foo()\n    bar( foo.out.collect() )\n}\n\nworkflow {\n    my_workflow()\n}\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>my_workflow</code> is a named workflow that contains two processes:         1. <code>foo()</code> runs first.         2. <code>bar()</code> takes the output of <code>foo()</code> and processes it.  </p> </li> <li> <p>The main workflow (<code>workflow { my_workflow() }</code>) calls <code>my_workflow()</code>, executing everything in order.  </p> </li> </ul>"}]}